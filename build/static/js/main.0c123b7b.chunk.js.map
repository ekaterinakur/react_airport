{"version":3,"sources":["components/Flight.js","components/FlightList.js","components/Schendule.js","App.js","serviceWorker.js","index.js"],"names":["timeView","elem","concat","FlightList","props","react_default","a","createElement","data","map","flight","text","departuresState","localDate","Date","actual","localeTime","getHours","getMinutes","depArrDate","timeDepShedule","timeArrShedule","depArrTime","className","key","ID","term","undefined","gateNo","airline","en","name","codeShareData","codeShare","href","Flight","Schendule","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","departures","arrivals","currentDate","getCurrentDate","dateForLink","changeTab","bind","assertThisInitialized","url","fetch","then","res","json","_this2","Promise","all","loadApi","_ref","flights","slicedToArray","setState","body","departure","arrival","event","targetTab","target","closest","dataset","tab","classList","add","nextSibling","remove","previousSibling","console","log","date","getDate","getMonth","_ref3","toConsumableArray","monthAndDayView","day","month","_ref4","getFullYear","loadItems","type","data-tab","onClick","Component","App","Schendule_Schendule","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c123b7b.chunk.js","sourcesContent":["import React from 'react';\nimport './Flight.css';\n\nexport default function Flight(props, text, departuresState) {\n  const localDate = new Date(props.actual);\n  const localeTime = `\n        ${timeView(localDate.getHours())}:${timeView(localDate.getMinutes())}\n        `;\n  const depArrDate = new Date(props.timeDepShedule || props.timeArrShedule);\n  const depArrTime = `\n        ${timeView(depArrDate.getHours())}:${timeView(depArrDate.getMinutes())}\n        `;\n\n  return (\n    <tr className=\"flight\" key={props.ID}>\n      <td><span className=\"terminal\">{props.term}</span></td>\n      {departuresState === undefined\n        ? <td>{props.gateNo || ''}</td>\n        : null}\n      <td>{localeTime}</td>\n      <td>{props['airportToID.city_en'] || props['airportFromID.city_en']}</td>\n      <td>{text + depArrTime}</td>\n      <td>{props.airline.en.name}</td>\n      <td>{props.codeShareData[0].codeShare}</td>\n      <td><a href=\"#\" className=\"details\">Flight details</a></td>\n    </tr>\n  );\n}\n\nfunction timeView(elem) {\n  return elem < 10 ? `0${elem}` : elem;\n}\n","import React from 'react';\nimport Flight from './Flight';\n\nexport default function FlightList(props) {\n  return (\n    <tbody>\n      {props.data.map(flight => Flight(flight, props.text, props.departuresState))}\n    </tbody>\n  );\n}\n","import React, { Component } from 'react';\nimport FlightList from './FlightList';\nimport './Schendule.css';\n\nexport default class Schendule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departuresState: true,\n      departures: [],\n      arrivals: [],\n      currentDate: this.getCurrentDate(),\n      dateForLink: this.dateForLink(),\n    };\n    this.changeTab = this.changeTab.bind(this);\n  }\n\n  loadApi(url) {\n    return fetch(url)\n      .then(res => res.json())\n      .then(data => data);\n  }\n\n  loadItems() {\n    Promise.all([\n      this.loadApi(`https://api.iev.aero/api/flights/${this.state.dateForLink}`),\n    ])\n      .then(([flights]) => {\n        this.setState({\n          departures: flights.body.departure,\n          arrivals: flights.body.arrival,\n        });\n      });\n  }\n\n  changeTab(event) {\n    const targetTab = event.target.closest('button').dataset.tab;\n    event.target.closest('button').classList.add('active');\n\n    switch (targetTab) {\n      case 'departures':\n        event.target.nextSibling.classList.remove('active');\n        this.setState({\n          departuresState: true,\n        });\n        break;\n      case 'arrivals':\n        event.target.previousSibling.classList.remove('active');\n        this.setState({\n          departuresState: false,\n        });\n        break;\n      default:\n        console.log('Lint wanted default case');\n    }\n  }\n\n  monthAndDayView(date) {\n    const dayAndMonth = [date.getDate(), date.getMonth() + 1];\n\n    return dayAndMonth.map(elem => elem < 10 ? (`0${elem}`) : elem);\n  }\n\n  getCurrentDate() {\n    const currentDate = new Date();\n    const [day, month] = [...this.monthAndDayView(currentDate)];\n\n    return `${day} / ${month}`;\n  }\n\n  dateForLink() {\n    const date = new Date();\n    const [day, month] = [...this.monthAndDayView(date)];\n\n    return `${day}-${month}-${date.getFullYear()}`;\n  }\n\n  render() {\n    this.loadItems();\n    const departureText = 'Departed at ';\n    const arrivalText = 'Landed ';\n    const displayGate = false;\n\n    return (\n      <section className=\"schendule\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"active departure\"\n            data-tab=\"departures\"\n            onClick={this.changeTab}\n          >\n            DEPARTURES\n          </button>\n          <button\n            type=\"button\"\n            className=\"arrive\"\n            data-tab=\"arrivals\"\n            onClick={this.changeTab}\n          >\n            ARRIVALS\n          </button>\n        </div>\n        <div className=\"dates\">\n          <span className=\"day\">\n            <div className=\"date\">\n              11 / 06\n            </div>\n            YESTERDAY\n          </span>\n          <span className=\"day active\">\n            <div className=\"date\">\n              {this.state.currentDate}\n            </div>\n            TODAY\n          </span>\n          <span className=\"day\">\n            <div className=\"date\">\n              13 / 06\n            </div>\n            TOMORROW\n          </span>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>Terminal</th>\n              {this.state.departuresState ? <th>Gate</th> : null}\n              <th>Local time</th>\n              <th>Destination</th>\n              <th>Status</th>\n              <th>Airline</th>\n              <th>Flight</th>\n              <th>-</th>\n            </tr>\n          </thead>\n          {this.state.departuresState\n            ? (\n              <FlightList\n                data={this.state.departures}\n                text={departureText}\n                date={this.currentDate}\n              />\n            )\n            : (\n              <FlightList\n                data={this.state.arrivals}\n                departuresState={displayGate}\n                text={arrivalText}\n                date={this.currentDate}\n              />\n            )\n          }\n        </table>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Schendule from './components/Schendule';\n\nfunction App() {\n  return (\n    <Schendule />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}